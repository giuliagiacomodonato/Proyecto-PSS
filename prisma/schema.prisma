// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para los roles de usuario
enum RolUsuario {
  ADMIN
  SOCIO
  ENTRENADOR
}

// Enum para tipo de socio
enum TipoSocio {
  INDIVIDUAL
  FAMILIAR
}

// Enum para días de la semana
enum DiaSemana {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}

// Enum para tipos de cancha
enum TipoCancha {
  FUTBOL_5
  FUTBOL
  BASQUET
}

// Tabla única de usuarios con todos los roles
model Usuario {
  id               Int         @id @default(autoincrement())
  rol              RolUsuario
  nombre           String      // Solo caracteres
  dni              String      @unique // 7-8 dígitos
  fechaNacimiento  DateTime
  email            String      @unique // Campo con '@' necesario
  telefono         String      // Solo números
  contraseña       String      // Mínimo 8 caracteres con validaciones
  fechaAlta        DateTime    @default(now())
  
  // Campos específicos para SOCIO
  tipoSocio        TipoSocio?  // Solo para socios
  direccion        String?     // Solo para socios
  familiarId       Int?        // Referencia a otro socio familiar
  familiar         Usuario?    @relation("SocioFamiliar", fields: [familiarId], references: [id])
  familiares       Usuario[]   @relation("SocioFamiliar")
  
  // Campos específicos para ENTRENADOR
  practicaDeportivaId Int?     // Solo para entrenadores
  practicaDeportiva   PracticaDeportiva? @relation(fields: [practicaDeportivaId], references: [id])
  
  // Relaciones
  turnos           Turno[]     // Turnos reservados (solo socios)
  bajasRealizadas  UsuarioBaja[] // Bajas que realizó este usuario
  
  @@map("usuarios")
}

// Tabla de prácticas deportivas
model PracticaDeportiva {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique // Solo caracteres
  descripcion String    // Máximo 150 caracteres
  precio      Int       // Solo dígitos
  cupo        Int
  // Relaciones
  horarios    Horario[]
  entrenadores Usuario[]
  canchas     Cancha[]
  
  @@map("practicas_deportivas")
}

// Tabla de horarios para prácticas deportivas
model Horario {
  id                  Int               @id @default(autoincrement())
  dia                 DiaSemana
  horaInicio          String            // Formato HH:MM
  horaFin             String            // Formato HH:MM
  practicaDeportivaId Int
  practicaDeportiva   PracticaDeportiva @relation(fields: [practicaDeportivaId], references: [id], onDelete: Cascade)
  
  @@map("horarios")
}

// Tabla de canchas
model Cancha {
  id                  Int               @id @default(autoincrement())
  nombre              String            @unique // Nombre de la cancha
  tipo                TipoCancha        // Tipo de cancha: FUTBOL_5, FUTBOL, BASQUET
  ubicacion           String            // Máximo 100 caracteres
  precio              Int               // Valor numérico entero positivo
  
  // Relaciones
  practicaDeportivaId Int?
  practicaDeportiva   PracticaDeportiva? @relation(fields: [practicaDeportivaId], references: [id])
  horarios            HorarioCancha[]   // Múltiples rangos horarios
  turnos              Turno[]
  
  @@map("canchas")
}

// Tabla de horarios de canchas (múltiples rangos por cancha)
model HorarioCancha {
  id          Int     @id @default(autoincrement())
  canchaId    Int
  cancha      Cancha  @relation(fields: [canchaId], references: [id], onDelete: Cascade)
  horaInicio  String  // Formato HH:MM
  horaFin     String  // Formato HH:MM
  
  @@map("horarios_cancha")
}

// Tabla de turnos
model Turno {
  id            Int      @id @default(autoincrement())
  canchaId      Int
  cancha        Cancha   @relation(fields: [canchaId], references: [id], onDelete: Cascade)
  horaInicio    String   // Formato HH:MM
  fecha         DateTime
  reservado     Boolean  @default(false)
  usuarioSocioId Int?    // Puede ser NULL si no está reservado
  usuarioSocio  Usuario? @relation(fields: [usuarioSocioId], references: [id])
  
  @@map("turnos")
}

// Tabla única de bajas de usuarios (auditoría de bajas)
// Almacena un snapshot completo de los datos del usuario eliminado y del que realizó la baja
model UsuarioBaja {
  id                Int         @id @default(autoincrement())
  
  // Snapshot del usuario eliminado (datos históricos inmutables)
  usuarioEliminadoId      Int         // ID del usuario eliminado (solo referencia histórica)
  usuarioEliminadoNombre  String      // Nombre del usuario eliminado
  usuarioEliminadoDni     String      // DNI del usuario eliminado
  usuarioEliminadoEmail   String      // Email del usuario eliminado
  rolUsuarioEliminado     RolUsuario  // Rol del usuario eliminado
  
  // Snapshot del usuario que realizó la baja (para auditoría completa)
  realizadoPorId          Int?        // ID del administrador que realiza la baja (puede ser NULL si fue eliminado)
  realizadoPorNombre      String      // Nombre del administrador que realizó la baja
  realizadoPorDni         String      // DNI del administrador que realizó la baja
  realizadoPor            Usuario?    @relation(fields: [realizadoPorId], references: [id], onDelete: SetNull)
  
  // Datos de la baja
  fechaBaja               DateTime    @default(now())
  motivo                  String?     // Motivo de la baja (opcional)
  
  @@map("usuarios_bajas")
}